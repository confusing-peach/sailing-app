#sidebar

##--- Disclaimers
forecasting_disclaimer = "This application uses forecast data pulled from the National Weather Service (NWS) API. Forecasts pulled from this API are at a 2.5km resolution, but weather can be variable at a much smaller scale. Never treat forecasts as a completely accurate prediction of future conditions."
vmgc_disclaimer = "This application is not a substitute for proper navigational software. It is intended as a demonstration of how velocity made good on course (VMGC) varies significantly based on wind speed and direction relative to the desired course. It does not take into account current, leeway, or course width. For more information about what VMGC is, see the below 'Intro to VMGC' section."

##---How to use: Forecasting
forecasting_guide = "This section of the web application can predict optimal sailing conditions when given a location and preferred wind speed range. Input the latitude and longitude of your location using standard coordinates as well as a minimum and maximum wind speed in mph. The application will output a graph showing times in the next day that have your preferred wind speed, if any, along with temperature information. Note that this application can only retrieve forecast data for locations within 12 NM of the continental United States (not including the Great Lakes). All windspeeds are in mph and temperatures are in fahrenheit."

##--- Intro to VMGC
vmgc_intro = "Sailboats are very different from motorboats. They cannot simply point in a given direction and go. Instead, they rely on the wind to provide power. Sailboats can head in almost any direction except a range varying by boat, generally about 45 degrees, to either side of the wind direction. To head closer to the wind, sailboats must switch sides repeatedly in a process called tacking. A tack is a given point of sail, or angle of the boat relative to the wind. Some tacks are faster than others. The speed of a tack relative to the wind is its velocity made good (VMG). Velocity made good for a given angle varies based both on the windspeed and the boat's characteristics (sail area, beam, draft, weight, etc.). One boat may have a faster VMG at 45 degrees and 10 mph than another boat in the same conditions. VMG can be visualized in VMG polars. The points on the VMG polar are plotted on a polar graph, with the angle relative to the wind calculated relative to the positive y axis, and the distance from the origin being the maximum possible boat speed. They generally make a heart-like shape. VMG only considers the fastest speed relative to the wind, however. It does not say what the fastest point of sail for a course that is not directly towards or away from the wind will be. Velocity made good on course (VMGC) is the fastest pair of points of sail for a given course. Because VMGC is usually not the tack directly towards the course, it is a pair of headings that must be alternated between until the destination is reached. It does not matter the order the headings are followed in, or the distance travelled before making a tack (switch between headings) - reaching the destination will always require the same distances for each heading."

##---How to use: VMGC Caculator
vmgc_guide = "This section of the web application can calculate the optimal heading pair based on a set course, wind speed, and wind direction. You may input your own start and end coordinates, or simply provide a compass heading and distance to travel. If you provide your own coordinates, the application will automatically calculate wind speed and direction. If you do not provide your own coordinates, or if you wish to use coordinates outside the 12 NM boundary, you must provide your own wind speed and wind direction in degrees. Note that this application cannot collect windpseed data for locations outside the 12 NM boundary of the continental United States (not including the Great Lakes). There are also significant limitations with these estimations. See below. Provided this data, the application will calculate the optimal pair of tacks or jibes to switch between to acheive maximum velocity made goood on course. It will also compare the calculated pair to a single heading in the course direction and calculate the efficiency achieved by following the calculated course."

vmgc_limitations = ["- This calculation uses data for the J-24. Other boats may vary significantly based on sail area, draft, beam, and weight", "- The VMG polar set used for this calculator only has 7 wind speeds. Input speeds not equal to the speeds in the polar will be rounded, causing error in accuracy", "- Does not account for leeway (leeward drift of the boat resulting from wind force), current, or waves.", "- Assumes maximum possible performance (perfect sail trim, weight distribution, and equipment)", "- Ignores potential obstacles in path, and assumes that both provided coordinates are in the same body of water"]

process = ["1) A line between the origin of the VMG polar and the desired course is drawn.", "2) A line perpendicular to the line to the course is drawn.", "3) The perpendicular line is moved along the course line until it is tangent with the graph.", "4) The point where the perpendicular line is tangent to the graph corresponds to the first heading angle and speed.", "5) The process is repeated such that another tangent point is found. If another point is not found, the original course is the fastest course."]

how = ["1) The user inputs wind and course information, either directly, or fetched from NWS data.", "2) The windspeed is adjusted to the speed it most closely matches from the VMG dataset: 6, 8, 10, 12, 14, 16, or 20 knots.", "3) The course direction is adjusted to be relative to the wind direction. For instance, if wind is coming from the east and the course is to the north, the course direction is adjusted to be to the west.", "4) The wind direction and course direction are used as keys in a Python dictionary (kind of like a really big spreadsheet) and the dictionary returns information about the optimal headings along with the corresponding speeds, which were manually calculated using the methods in the 'How is VMGC calculated? section.'", "5) The headings from the dictionary assume wind is from the north, so an offset is added so they match the actual wind direction.", "6) A system of equations is solved to see how far each heading needs to be followed to reach the destination. This is done through Gauss-Jordan elimination.", "7) The heading distances are divided by their corresponding speeds to find the total time.", "8) The time is compared to the time using a straightline course.", "9) If the straightline course is faster, it is returned. If the VMGC-optimized course is faster, that is returned instead."]

goals = ["- Implement ability to pick directions outside of those on a 16-point compass rose", "- Implement ability to plot courses over great-circle distances", "- Enable forecasting outside of NWS boundaries using alternative APIs", "- Add VMG polars for more boats", "- Implement course optimization with current/leeway", "- Add graphical representation of courses"]

## Sources
sources = ["- Forecast data is from NWS API: https://www.weather.gov/documentation/services-web-api", "- J-24 VMG polar data via 76Trombones of Sailonline.org: https://76trombones.wordpress.com/offshore-handicap-fleet/j24/", "- Basis for VMGC calculations via 76Trombones of Sailonline.org: https://76trombones.wordpress.com/2009/10/18/polar-diagrams-vmc/"]

#Forecasting

finder_base_url = "https://api.weather.gov/points/"
forecast_base_url = "https://api.weather.gov/gridpoints/"
unavailable = "https://api.weather.gov/problems/NotFound"
invalid = "https://api.weather.gov/problems/InvalidPoint"

#VMGC Calculator
vmgc_instructions1 = "Don't know what VMGC is? Check the sidebar!"
vmgc_instructions2 = "This calculator requires a wind speed, direction, course direction, and course distance. You may input a starting location and distance using coordinates. If you do not specify a wind speed and direction, the calculator will obtain those values using NWS data. Alternatively, you may input course direction and distance. If you do this, you must input custom wind speed and direction data. Note that the calculator can only fetch weather data inside a 12 NM line of the coastline of the continental US."


####
### DO NOT TOUCH ANYTHING BELOW THIS LINE, IT WILL MESS UP THE APP!
####

# convert between NWS API/user inputs and degrees
dir_dict = {"N": 0, "NNE": 22.5, "NE":45, "ENE": 67.5, "E": 90, "ESE": 112.5, "SE":135, "SSE": 157.5, "S":180, "SSW": 202.5, "SW":225, "WSW":247.5, "W": 270, "WNW":292.5, "NW": 315, "NNW": 337.5}

#convert between degrees and NWS 
rev_dir_dict = {0: "N", 22.5: "NNE", 45: "NE", 67.5: "ENE", 90: "E", 112.5: "ESE", 135:"SE", 157.5:"SSE", 180: "S", 202.5: "SSW", 225:"SW", 247.5:"WSW", 270:"W", 292.5:"WNW", 315:"NW", 337.5: "NNW"}

#format {[wind speed]: [a, b, c, d, f, g, h, j, k]}

# vmg equation is of form
# a*sin(b*theta+c) + d*tan(f*theta+g) + h*cos(j*theta+k)
# signs of a/d/h and b/f/j are adjusted depending on the side of y axis they are on - see the vmg_calc function for more information

polar_dict = {6: [-347150.632691, 1.17688604415, -1.73620884206, -0.30805576662, -1.01686374131, 0.198054208014, -347145.381896, 1.17689100466, -0.165415580577], 8:[0.00658632, 27.4963667674, -0.946673471858, 0.233812862414, 1.0421468565, -0.30306756941, 6.05449514009, 0.685261416588, 0.0624703909202],10:[0.0054309, 28.1678, 0.241176146914, 0.366331054144, 0.952151015051, -0.373434633801, 6.54660577679, 0.567205839187, 0.0969956125423], 12:[-1.52866902809, 1.16603827215, -2.63686868318, -1.8707414492, -0.788281092885, 3.50665034926, 12257448.6023, 2.5452058767*10**-7, 7.85398108912], 14:[0.0751934, 5.01752, 0.0847017787824, 0.784523763392, 0.861644380358, 2.78270293738, 7.41768302778, 0.501640752745, 0.144706747614], 16:[0.6, 2.5207273297, 1.13347918435, -0.000239090655023, -0.00163269613499, -501.085897679, 7.09187255813, 0.235056408422, -0.0711270538819], 20:[0.309373, 4.93463, -0.658872934352, -0.671546351574, -0.689336382171, -499.492507522, 8.08996749211, 0.645757670939, -0.16572082976]}

#format: 
# {[ws]:
#       {[relative dir]: (heading1 direction, heading1 speed, heading 2 direction, heading 2 speed, default (straightline) speed)
#           }
#               }
heading_data = {6: {'N': (311.8, 4.938, 48.2, 4.938, 2.879), 'NNE': (53.3, 5.245, 323.4, 3.979, 1.665), 'NE': (63.6, 5.703, 331.9, 2.882, 4.714), 'ENE': (75.7, 6.008, 338.8, 1.238, 5.827), 'E': (90.0, 6.092, 90.0, 6.092, 6.092), 'ESE': (101.5, 5.972, 174.5, 2.987, 5.721), 'SE': (115.4, 5.635, 174.5, 2.987, 4.856), 'SSE': (130.3, 5.071, 200.0, 3.53, 3.666), 'S': (145.0, 4.351, 215.0, 4.351, 3.245), 'SSW': (229.7, 5.071, 160.0, 3.530, 3.666), 'SW': (244.6, 5.635, 185.5, 2.987, 4.856), 'WSW': (258.5, 5.972, 185.5, 2.987, 5.721), 'W': (270.0, 6.092, 270.0, 6.092, 6.092), 'WNW': (284.3, 6.008, 21.2, 1.238, 5.827), 'NW': (296.4, 5.703, 28.1, 2.882, 4.714), 'NNW': (306.7, 5.245, 36.6, 3.979, 1.665)}, 8: {'N': (41.3, 5.383, 318.7, 5.383, 4.377), 'NNE': (48.7, 5.849, 325.6, 4.711, 1.612), 'NE': (61.4, 6.401, 330.7, 3.868, 5.641), 'ENE': (72.8, 6.705, 334.1, 2.675, 6.594), 'E': (90.0, 6.865, 90.0, 6.865, 6.865), 'ESE': (104.9, 6.759, 184.1, 4.064, 6.615), 'SE': (122.7, 6.351, 184.1, 4.064, 5.909), 'SSE': (134.7, 5.921, 184.1, 4.064, 4.852), 'S': (150.7, 5.191, 209.3, 5.191, 4.025), 'SSW': (225.3, 5.921, 175.9, 4.064, 4.852), 'SW': (237.3, 6.351, 175.9, 4.064, 5.909), 'WSW': (255.1, 6.759, 175.9, 4.064, 6.615), 'W': (270.0, 6.865, 270.0, 6.865, 6.865), 'WNW': (287.2, 6.705, 25.9, 2.675, 6.594), 'NW': (298.6, 6.401, 29.3, 3.868, 5.641), 'NNW': (311.3, 5.849, 34.4, 4.711, 1.612)}, 10: {'N': (40.2, 5.869, 319.8, 5.869, 6.654), 'NNE': (47.6, 6.355, 326.7, 5.117, 0.768), 'NE': (57.9, 6.812, 331.3, 4.248, 6.208), 'ENE': (74.0, 7.201, 337.0, 1.342, 7.091), 'E': (90.0, 7.336, 90.0, 7.336, 7.336), 'ESE': (112.5, 7.147, 112.5, 7.147, 7.147), 'SE': (125.5, 6.877, 184.1, 5.135, 6.617), 'SSE': (137.0, 6.551, 184.1, 5.135, 5.832), 'S': (158.8, 5.779, 201.2, 5.779, 5.026), 'SSW': (223.0, 6.551, 175.9, 5.135, 5.832), 'SW': (234.5, 6.877, 175.9, 5.135, 6.617), 'WSW': (247.5, 7.147, 247.5, 7.147, 7.147), 'W': (270.0, 7.336, 270.0, 7.336, 7.336), 'WNW': (286.0, 7.201, 23.0, 1.342, 7.091), 'NW': (302.1, 6.812, 28.7, 4.248, 6.208), 'NNW': (312.4, 6.355, 33.3, 5.117, 0.768)}, 12: {'N': (39.0, 6.085, 321.0, 6.085, 77.869), 'NNE': (47.6, 6.727, 326.1, 5.509, 3.002), 'NE': (60.2, 7.267, 332.5, 4.407, 6.565), 'ENE': (74.5, 7.584, 339.9, 2.023, 7.457), 'E': (90.0, 7.715, 90.0, 7.715, 7.715), 'ESE': (104.3, 7.682, 118.6, 7.513, 7.601), 'SE': (127.8, 7.337, 143.3, 6.937, 7.166), 'SSE': (145.0, 6.886, 185.0, 5.982, 6.494), 'S': (164.5, 6.273, 195.5, 6.273, 5.884), 'SSW': (215.0, 6.886, 175.0, 5.982, 6.494), 'SW': (232.2, 7.337, 216.7, 6.937, 7.166), 'WSW': (255.7, 7.682, 241.4, 7.513, 7.601), 'W': (270.0, 7.715, 270.0, 7.715, 7.715), 'WNW': (285.5, 7.584, 20.1, 2.023, 7.457), 'NW': (299.8, 7.267, 27.5, 4.407, 6.565), 'NNW': (312.4, 6.727, 33.9, 5.509, 3.002)}, 14: {'N': (39.0, 6.340, 321.0, 6.34, 13.081), 'NNE': (45.3, 6.827, 327.3, 5.612, 3.211), 'NE': (59.1, 7.453, 333.0, 4.572, 6.808), 'ENE': (75.7, 7.873, 339.3, 2.399, 7.687), 'E': (90.0, 8.117, 90.0, 8.117, 8.117), 'ESE': (112.5, 8.102, 112.5, 8.102, 8.102), 'SE': (135.0, 7.559, 135.0, 7.559, 7.559), 'SSE': (146.7, 7.247, 185.0, 6.647, 7.00000000000000), 'S': (170.8, 6.729, 189.2, 6.729, 6.561), 'SSW': (213.3, 7.247, 175.0, 6.647, 7.0), 'SW': (225.0, 7.559, 225.0, 7.559, 7.559), 'WSW': (247.5, 8.102, 247.5, 8.102, 8.102), 'W': (270.0, 8.117, 270.0, 8.117, 8.117), 'WNW': (284.3, 7.873, 20.7, 2.399, 7.687), 'NW': (300.9, 7.453, 27.0, 4.572, 6.808), 'NNW': (314.7, 6.827, 32.7, 5.612, 3.211)}, 16: {'N': (36.1, 6.339, 323.9, 6.339, 7.566), 'NNE': (45.3, 6.927, 327.3, 5.941, 12.099), 'NE': (61.9, 7.693, 329.6, 5.463, 6.911), 'ENE': (79.11, 8.352, 333.6, 2.209, 7.929), 'E': (90.0, 8.621, 90.0, 8.621, 8.621), 'ESE': (112.5, 8.639, 112.5, 8.639, 8.639), 'SE': (135.0, 8.042, 135.0, 8.042, 8.042), 'SSE': (157.5, 7.352, 157.5, 7.352, 7.352), 'S': (180.0, 7.100, 180.0, 7.100, 7.100), 'SSW': (202.5, 7.352, 202.5, 7.352, 7.352), 'SW': (225.0, 8.042, 225.0, 8.042, 8.042), 'WSW': (247.5, 8.639, 247.5, 8.639, 8.639), 'W': (270.0, 8.621, 270.0, 8.621, 8.621), 'WNW': (280.89, 8.352, 26.4, 2.209, 7.929), 'NW': (298.1, 7.693, 30.4, 5.463, 6.911), 'NNW': (314.7, 6.927, 32.7, 5.941, 12.099)}, 20: {'N': (40.2, 6.752, 319.8, 6.752, 1.712), 'NNE': (49.3, 7.426, 330.1, 5.637, 4.676), 'NE': (56.8, 7.773, 341.6, 4.12, 7.145), 'ENE': (80.3, 8.500, 341.6, 4.12, 8.088), 'E': (90.0, 8.950, 90.0, 8.950, 8.950), 'ESE': (112.5, 9.814, 112.5, 9.814, 9.814), 'SE': (135.0, 9.190, 135.0, 9.190, 9.190), 'SSE': (136.4, 9.115, 185.0, 7.879, 8.172), 'S': (173.7, 7.897, 186.4, 7.899, 7.799), 'SSW': (223.6, 9.115, 175.0, 7.879, 8.172), 'SW': (225.0, 9.19, 225.0, 9.19, 9.19), 'WSW': (247.5, 9.814, 247.5, 9.814, 9.814), 'W': (270.0, 8.95, 270.0, 8.95, 8.95), 'WNW': (279.7, 8.5, 18.4, 4.120, 8.088), 'NW': (303.2, 7.773, 18.4, 4.120, 7.145), 'NNW': (310.7, 7.426, 29.9, 5.637, 4.676)}}

### Sample Calcs
prologue = "This calculation set assumes a desired heading of 30 degrees from north (approximately northeast-by-north) and a windspeed of 6 knots. Like all calculations on this site, it uses VMG data from the J-24. All images and calculations shown here were performed in desmos, an online graphing calculator software. "
step1 = "First, let's look at the data we have. The below image shows the data points for 6 knots."
step2 = "Next, we need a curve fit so we can easily get precise measurements. This curve fit will only use the left side of the data. The curve fit takes the form below."
step2l = r"\sqrt{x_1^2+y_1^2} = a \cdot sin \left(b \cdot arctan \left( \frac{y_1}{x_1}\right) + c \right) + d \cdot tan \left(f \cdot arctan \left( \frac{y_1}{x_1}\right) + g \right) + h \cdot cos \left(j \cdot arctan \left( \frac{y_1}{x_1}\right) + k \right)"
step3 = "Desmos finds the coefficients. (The coefficients shown here are not the same as those used in the app, which has to do with the way that Desmos finds curve fits). The coefficients, and curve fit graph, are shown below. Technically, there are two graphs shown. They are mirrored so that we have access to the full 360 degrees."

step4 = "Now, we need to convert the curve fits to polar form. We do this using the below relationships:"
step4l = r"r = \sqrt{x^2 + y^2}"
step4l2 = r"\theta = arctan\left( \frac {y}{x}\right)"

step5 = "The conversions yield the below equations, where r is the left side of the graph and s is the right side. Theta is bounded by -90 and 90 degrees for both equations. When plotted, these equations look exactly the same as the curve fit equations shown earlier, but because they are only parameterized with theta, it is easy to retrieve values from them."
step5l1 = r"r(\theta) = -a \cdot sin(b \cdot \theta +c)-d \cdot tan(f \cdot \theta +g)-h \cdot cos(j \cdot \theta +k)"
step5l2 = r"s(\theta) = a \cdot sin(-b \cdot \theta +c)+d \cdot tan(-f \cdot \theta +g)+h \cdot cos(-j \cdot \theta +k)"
step6 = "Now, let's plot the line through the point of 30 degrees on the graph. Because of the way polar coordinates work (0 degrees is where we want 90 degrees to be), we have to subtract the value we want as our input from 90. This is shown in the equation below. Desmos allows us to swap freely between Cartesian (x,y) and polar (r, theta) coordinates, and we will make full use of this!"
step6l = r"y = tan(60) \cdot x"
step7 = "The next step is to find the equation of the line perpendicular to the course line. See the equation below."
step7l = r"y = -\frac{1}{tan(60)} \cdot x"
step8 = "Now, we need to find the points on the polar where the perpendicular line is tangent to the polar. While this could be done using a derivative, that doesn't work well for this purpose as the curve fit is a sum of trig functions. Instead, we will use an Euler approximation, set it equal to the slope of our perpendicular line, and solve for x."
step8l = r"\frac{s(x-0.0001)\cdot sin(x-0.0001)-s(x+0.0001)\cdot sin(x+0.0001)}{s(x-0.0001)\cdot cos(x-0.0001)-s(x+0.0001)\cdot cos(x+0.0001)}= -\frac{1}{tan(60)}"
step9 = "Desmos graphs the above equation as as series of vertical lines, with the solutions as the x-intercepts. The solution for the first heading is 33.2. We then graph the perpendicular line through the point and the heading to the point to confirm our solution. Because of more coordinate weirdness, we need to add 90 degrees when finding the line to the course."
step9l1 = r"y = -\frac{1}{tan(60)} \cdot (x -s(33.2)\cdot cos(33.2)) + s(33.2)\cdot sin(33.2)"
step9l2 = r"y = -\frac{1}{tan(123.2)} \cdot x"
step10 = "This is great! But following the green heading only will take us away from our course. So we need another heading that points in the opposite direction. We find it the same way we found the first heading, but using the left side of the graph instead - r instead of s. The solution this time is -57.7."
step10l1 =r"\frac{r(x-0.0001)\cdot sin(x-0.0001)-r(x+0.0001)\cdot sin(x+0.0001)}{r(x-0.0001)\cdot cos(x-0.0001)-r(x+0.0001)\cdot cos(x+0.0001)}= -\frac{1}{tan(60)}"
step10l2 = r"y = -\frac{1}{tan(60)} \cdot (x -s(-57.7)\cdot cos(-57.7)) + s(-57.7)\cdot sin(-57.7)"
step10l3 = r"y = -\frac{1}{tan(32.3)} \cdot x"
step11 = "'Wait, so what are these headings anyway? The solutions don't seem to correspond to the actual compass directions.' Correct! It has to do with, you guessed it, more coordinate weirdness. The way to solve for the actual headings is below. There's probably a simpler way to do this, but I haven't found it yet, and this works well enough."
step11l1 = r"180 - \left(arctan\left(\frac{s(33.2)\cdot sin(33.2)}{s(33.2)\cdot cos(33.2)}\right)+90\right)=56.8"
step11l2 = r"360 - \left(arctan\left(\frac{r(-57.7)\cdot sin(-57.7)}{r(-57.7)\cdot cos(-57.7)}\right)+90\right)=236.8"
step12 = "Now we have the headings in degrees. If you trust me, you can stop reading here, because the next part is just validating that our results are correct, and calculating the distance we need to travel. We will assume we want to travel 10 miles. First, let's just find how long it would take us to sail ten miles if we just head straight towards a 30 degree heading. We do this by plugging 60 into the right-side equation, which returns our speed in knots. To convert to miles per hour, multiply by 1.151."
step12l1 = r"s(60)= 2.76 \text{ knots}"
step12l2 = r"2.76 \cdot 1.151 = 3.18 \text{ mph}"
step12l3 = r"\frac{10 \text{ miles}}{3.18 \text{ mph}} = 3.15 \text{ hours}"
step13 = "That's how long it would take if we just sailed in a straight line. Now, let's see how long it would take with the optimization! First, we need to find the speeds at the different headings. We will denote the speed at heading 1 v1, and the speed at heading 2 v2."
step13l1 = r"v_1 = s(33.2) \cdot 1.151 = 5.42 \text{ mph}"
step13l2 = r"v_2 = r(-57.7) \cdot 1.151 = 3.49 \text{ mph}"
step14 = "Having the speeds is great, but we need to know how far we need to go on each heading. The heading angles can be made into vectors, along with the course angle. We will use a linear combination of the heading angle vectors to mke up the course angle vector. To find how long each vector needs to be, we will use Gauss-Jordan elimination (a fancy way to solve a system of equations - you could solve this using substitution if you wanted, but it was easier for me to automate using Gauss-Jordan). Headings 1 and 2 will be represented as h1 and h2, while the course will be c. The course angle vector is multiplied by our course length (10 miles). The angles are modified so that they will still point in the correct direction, with 0 degrees being the positive y axis."
step14l1 = r"h_1 = \begin{bmatrix} cos(33.2)\\ sin(33.2) \end{bmatrix}= \begin{bmatrix} 0.84\\ 0.55 \end{bmatrix}"
step14l2 = r"h_2 = \begin{bmatrix} cos(122.3)\\ sin(122.3) \end{bmatrix} = \begin{bmatrix} -0.53\\ 0.85 \end{bmatrix}"
step14l3 = r"c = \begin{bmatrix} 10\cdot cos(60)\\ 10 \cdot sin(60) \end{bmatrix} = \begin{bmatrix} 5 \\ 8.66 \end{bmatrix}"
step14l4 = r"\begin{bmatrix} 0.84 & -0.53 & 5\\ 0.55 & 0.85 & 8.66 \end{bmatrix}"
step14l5 = r"\begin{bmatrix} 1 & 0 & 8.79\\ 0 & 1 & 4.5 \end{bmatrix}"
step15 = "The solved matrix shows us that we need to travel 8.79 miles on the first heading, and 4.5 miles on the second heading. Now, let's calculate the time to travel each heading!"
step15l1 = r"\frac{8.79 \text{ miles}}{5.42 \text{ mph}} = 1.62 \text{ hours}"
step15l2 = r"\frac{4.5 \text{ miles}}{3.49 \text{ mph}} = 1.28 \text{ hours}"
step15l3 = r"1.62 \text{ hours}+ 1.28 \text{ hours}= 2.9 \text{ hours}"
step16 = "HOORAY! This is clearly faster than the straight line course, which has a time of 3.15 hours - an 8% difference. 8% may not seem like a lot, but every second matters when racing. Other courses may have even higher efficiency when their VMGC is calculated, depending on windspeed. Note that this efficiency is dependent on perfect conditions and optimal sailing. It may also increase or decrease based on the boat being sailed, as every boat has a different VMG polar."
epilogue = "Hopefully this has been somewhat informative into how the calculations for htis app work! Feel free to try them yourself. If the part with the Euler approximation was too much, never fear! It is possible to get close to the values you would with the approximation through graphical estimation. To do this, replace the values in the tangent and heading equations with variables of your choosing. Desmos will create sliders. You can then manipulate the sliders until you get results that look correct. Then plug the value of the slider into the 'correction' equations to get the headings, in degrees. At some point, I  plan to publish a public Desmos graph both with the Euler method and the slider method."

